<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="site.doget.mybatis.mapper.DepositCustomerMapper">
    <resultMap id="CustomerCountByTypeResultMap" type="site.doget.dto.raw.CustomerCountByTypeRawDto">
        <result property="newDt" column="new_dt"/>
        <result property="custDscdNm" column="cust_dscd_nm"/>
        <result property="count" column="count"/>
    </resultMap>
    <resultMap id="CustomerCountByAmountResultMap" type="site.doget.dto.raw.CustomerCountByAmountRawDto">
        <result property="range" column="range"/>
        <result property="custDscdNm" column="cust_dscd_nm"/>
        <result property="count" column="count"/>
    </resultMap>


    <select id="findDepositByCustomerType" resultMap="CustomerCountByTypeResultMap" parameterType="map">
        SELECT
        <if test="term == 'yearly'">TO_CHAR(new_dt, 'yyyy') AS new_dt,</if>
        <if test="term == 'quarterly'">TO_CHAR(new_dt, 'yyyy-q') AS new_dt,</if>
        <if test="term == 'monthly'">TO_CHAR(new_dt, 'yyyy-mm') AS new_dt,</if>
        cust_dscd_nm, COUNT(*) AS count
        FROM deposit_info
        WHERE bank_code = #{bankCode} AND new_dt BETWEEN TO_DATE(#{stDate}, 'yyyy-mm-dd') AND TO_DATE(#{endDate}, 'yyyy-mm-dd')
        GROUP BY
        <if test="term == 'yearly'">TO_CHAR(new_dt, 'yyyy'),</if>
        <if test="term == 'quarterly'">TO_CHAR(new_dt, 'yyyy-q'),</if>
        <if test="term == 'monthly'">TO_CHAR(new_dt, 'yyyy-mm'),</if>
        cust_dscd_nm
        ORDER BY new_dt
    </select>

    <select id="findDepositByAmount" resultMap="CustomerCountByAmountResultMap" parameterType="map">
    <![CDATA[
        WITH ranges AS (
            SELECT 0 AS lower_bound, 1000000 AS upper_bound FROM DUAL
            UNION ALL
            SELECT 1000000, 2000000 FROM DUAL
            UNION ALL
            SELECT 2000000, 4000000 FROM DUAL
            UNION ALL
            SELECT 4000000, 7000000 FROM DUAL
            UNION ALL
            SELECT 7000000, 10000000 FROM DUAL
            UNION ALL
            SELECT 10000000, 20000000 FROM DUAL
            UNION ALL
            SELECT 20000000, 30000000 FROM DUAL
            UNION ALL
            SELECT 30000000, 80000000 FROM DUAL
            UNION ALL
            SELECT 80000000, NULL FROM DUAL
        ),
             all_cust_dscd_nm AS (
                 SELECT DISTINCT cust_dscd_nm
                 FROM deposit_info
             )
        SELECT
            CONCAT(r.lower_bound, CONCAT('~', NVL(TO_CHAR(r.upper_bound), ''))) AS range,
            acn.cust_dscd_nm,
            SUM(NVL(CASE
                        WHEN d.NEW_DPSAMT >= r.lower_bound AND (d.NEW_DPSAMT < r.upper_bound OR r.upper_bound IS NULL) THEN 1
                        ELSE 0
                        END, 0)) AS count
        FROM ranges r
            CROSS JOIN all_cust_dscd_nm acn
            LEFT JOIN deposit_info d
        ON acn.cust_dscd_nm = d.cust_dscd_nm
            AND (d.NEW_DPSAMT >= r.lower_bound AND (d.NEW_DPSAMT < r.upper_bound OR r.upper_bound IS NULL))
            AND d.bank_code = #{bankCode}
            AND d.new_dt BETWEEN TO_DATE(#{stDate}, 'yyyy-mm-dd') AND TO_DATE(#{endDate}, 'yyyy-mm-dd')
        GROUP BY r.lower_bound, r.upper_bound, acn.cust_dscd_nm
        ORDER BY r.lower_bound, acn.cust_dscd_nm
        ]]>
    </select>

</mapper>
